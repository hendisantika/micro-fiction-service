openapi: 3.0.0
info:
  title: Microfiction API
  description: |
    The Microfiction API is a RESTful web service designed for writers to create, publish, and explore microfiction stories. Microfiction, also known as flash fiction or short-short stories, is a genre of fiction characterized by its brevity, typically consisting of narratives under 300 words. This API provides writers with the tools to manage their stories, interact with other writers, and engage with readers in a vibrant community dedicated to the art of concise storytelling.

    Key Features:
    - **User Management**: Create accounts, manage profiles, and connect with fellow writers.
    - **Story Creation and Publication**: Write, edit, and publish microfiction stories with ease.
    - **Social Interaction**: Like, comment on, and share stories to engage with other writers and readers.
    - **Search and Discovery**: Explore a diverse collection of microfiction stories through advanced search and discovery features.
    - **Security and Privacy**: Secure authentication and authorization mechanisms protect user data and ensure privacy.

    Whether you're a seasoned writer looking to share your stories or a reader seeking captivating narratives, the Microfiction API offers a platform for creativity, inspiration, and connection within the microfiction community.
  version: 1.0.0
paths:
  /users:
    post:
      summary: Create a User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: Get User Details
      operationId: getUser
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to fetch
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    put:
      summary: Update User Details
      operationId: updateUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete User
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
  /stories:
    post:
      summary: Create a Story
      operationId: createStory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryCreateRequest'
      responses:
        '201':
          description: Story created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
    get:
      summary: Get All Stories
      operationId: getAllStories
      responses:
        '200':
          description: List of stories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'
  /stories/{storyId}:
    get:
      summary: Get Story Details
      operationId: getStory
      parameters:
        - in: path
          name: storyId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the story to fetch
      responses:
        '200':
          description: Story details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
    put:
      summary: Update Story Details
      operationId: updateStory
      parameters:
        - in: path
          name: storyId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the story to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryUpdateRequest'
      responses:
        '200':
          description: Story details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
    delete:
      summary: Delete Story
      operationId: deleteStory
      parameters:
        - in: path
          name: storyId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the story to delete
      responses:
        '204':
          description: Story deleted successfully
  /likes:
    post:
      summary: Like a Story
      operationId: likeStory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeCreateRequest'
      responses:
        '201':
          description: Story liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
    get:
      summary: Get All Likes
      operationId: getAllLikes
      responses:
        '200':
          description: List of likes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'
  /likes/{likeId}:
    delete:
      summary: Delete Like
      operationId: deleteLike
      parameters:
        - in: path
          name: likeId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the like to delete
      responses:
        '204':
          description: Like deleted successfully
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - email
        - password
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email
    Story:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          format: date-time
        likes:
          type: integer
        comments:
          type: integer
      required:
        - title
        - content
        - author
        - creationDate
        - likes
        - comments
    StoryCreateRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
      required:
        - title
        - content
        - author
    StoryUpdateRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content
    Like:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        story:
          $ref: '#/components/schemas/Story'
      required:
        - user
        - story
    LikeCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        story:
          $ref: '#/components/schemas/Story'
      required:
        - user
        - story